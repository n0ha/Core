<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>cz.cuni.mff.xrg.odcs</groupId>
		<artifactId>odcs</artifactId>
		<version>1.4.1-UK-SNAPSHOT</version>
	</parent>
	<artifactId>commons-app</artifactId>
	<name>commons-app</name>
	<description></description>

	<!-- Shared version number properties -->
	<properties>
		<logback.version>1.0.13</logback.version>
		<aspectj.version>1.7.3</aspectj.version>
	</properties>

	<repositories>

		<repository>
			<id>eclipselink</id>
			<url>http://www.eclipse.org/downloads/download.php?r=1&amp;nf=1&amp;file=/rt/eclipselink/maven.repo/</url>
		</repository>

		<repository>
			<id>repo.eclipse.org</id>
			<!-- repository for org.eclipse.tycho -->
			<name>Project Repository - Snapshots</name>
			<url>https://repo.eclipse.org/content/repositories/snapshots/</url>
		</repository>

		<repository> <!-- spring repository -->
			<id>com.springsource.repository.bundles.release</id>
			<name>SpringSource Enterprise Bundle Repository - SpringSource Bundle Releases</name>
			<url>http://repository.springsource.com/maven/bundles/release</url>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dpu-api</artifactId>
			<version>${uv-dpu-api.version}</version>
		</dependency>

		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dpu-api-helpers</artifactId>
			<version>${uv-dpu-api-helpers.version}</version>
		</dependency>

		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dataunit-rdf</artifactId>
			<version>${uv-dataunit-rdf.version}</version>
		</dependency>

		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dataunit-files</artifactId>
			<version>${uv-dataunit-files.version}</version>
		</dependency>

		<dependency>
			<groupId>eu.unifiedviews</groupId>
			<artifactId>uv-dataunit-helpers</artifactId>
			<version>${uv-dataunit-helpers.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>dataunit</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>dataunit-rdf</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>dataunit-rdf-impl</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency> <!-- file dataunit project -->
			<groupId>${project.groupId}</groupId>
			<artifactId>dataunit-file-impl</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency> <!-- logback as implementation org.slf4j -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version>
		</dependency>

		<dependency> <!-- xml object de-serialization -->
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>1.4.5</version>
		</dependency>

		<dependency> <!-- OSGI impelemention -->
			<groupId>org.eclipse.tycho</groupId>
			<artifactId>org.eclipse.osgi</artifactId>
			<version>3.9.0.v20130305-2200</version>
		</dependency>

		<dependency> <!-- apache.commons : delete folder recursive -->
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
			<type>jar</type>
		</dependency>

		<dependency> <!-- email sending -->
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4</version>
		</dependency>

		<!-- SPRING DEPENDENCIES -->

		<!-- Core utilities used by other modules. Define this if you use Spring 
			Utility APIs (org.springframework.core.*/org.springframework.util.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Application Context (depends on spring-core, spring-expression, spring-aop, 
			spring-beans) This is the central artifact for Spring's Dependency Injection 
			Container and is generally always defined -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define 
			this if you use Spring Bean APIs (org.springframework.beans.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Transaction Management Abstraction (depends on spring-core, spring-beans, 
			spring-aop, spring-context) Define this if you use Spring Transactions or 
			DAO Exception Hierarchy (org.springframework.transaction.*/org.springframework.dao.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, 
			and iBatis. (depends on spring-core, spring-beans, spring-context, spring-tx) 
			Define this if you need ORM (org.springframework.orm.*) -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- Support for testing Spring applications with tools such as JUnit and 
			TestNG This artifact is generally always defined with a 'test' scope for 
			the integration testing framework and unit testing stubs -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- SPRING SECURITY LIBRARIES -->

		<!-- Contains core authentication and access-contol classes and interfaces, 
			remoting support and basic provisioning APIs. Required by any application 
			which uses Spring Security. Supports standalone applications, remote clients, 
			method (service layer) security and JDBC user provisioning. -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${org.springframework.security.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- Contains filters and related web-security infrastructure code. Anything 
			with a servlet API dependency. You'll need it if you require Spring Security 
			web authentication services and URL-based access-control. -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${org.springframework.security.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- Spring aspects so we can reference them in AspectJ aspects -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- CGLIB is required for proxying classes without interface -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>3.0</version>
		</dependency>

		<!-- ASM depends on ASM-UTIL, CGLIB depends on ASM, however ASM is loaded 
			by maven automatically while ASM-UTIL is not... -->
		<dependency>
			<groupId>org.ow2.asm</groupId>
			<artifactId>asm-util</artifactId>
			<version>4.0</version>
		</dependency>

		<!-- END OF SPRING DEPENDENCIES -->

		<!-- Embedded database used for testing -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.3.171</version>
		</dependency>

		<!-- EclipseLink dependencies -->
		<!-- EclipseLink needs at least version 2.5.1 to get around bug 413084 
			https://bugs.eclipse.org/bugs/show_bug.cgi?id=413084 -->
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>eclipselink</artifactId>
			<version>2.5.1</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>javax.persistence</artifactId>
			<version>2.1.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.1</version>
		</dependency>


		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.6</version>
		</dependency>

		<!-- Aspect Oriented Programming with AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${aspectj.version}</version>
		</dependency>

		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectj.version}</version>
		</dependency>

		<dependency> <!-- Contains DataSource with connection pooling. -->
			<artifactId>commons-dbcp</artifactId>
			<groupId>commons-dbcp</groupId>
			<type>jar</type>
			<version>1.4</version>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.4</version>
			<scope>test</scope>
		</dependency>

		<dependency> <!-- JUnit dependency -->
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.17</version>
			</plugin>

			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.17</version>
			</plugin>

			<!-- Process classes after compilation to weave bytecode for JPA entities -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>process-classes</phase>
						<configuration>
							<tasks>
								<java classname="org.eclipse.persistence.tools.weaving.jpa.StaticWeave"
									classpathref="maven.runtime.classpath" fork="true">
									<arg
										line="-loglevel FINE -persistenceinfo src/main/resources target/classes target/classes" />
								</java>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- AspecJ maven plugin used for compile-time bytecode weaving. Needed 
				for aspects to work. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>aspectj-maven-plugin</artifactId>
				<version>1.5</version>
				<configuration>
					<source>${project.java.version}</source>
					<target>${project.java.version}</target>
					<complianceLevel>${project.java.version}</complianceLevel>
					<showWeaveInfo>true</showWeaveInfo>
					<verbose>true</verbose>
					<weaveDependencies>
						<!-- We need to weave bytecode to EclipseLink dependency when catching 
							exceptions thrown because corrupted sequences in db. See VirtuosoSequenceSanitizerAspect. -->
						<weaveDependency>
							<groupId>org.eclipse.persistence</groupId>
							<artifactId>eclipselink</artifactId>
						</weaveDependency>
					</weaveDependencies>
					<aspectLibraries>
						<!-- Spring aspects are here so aspects defined therein are picked 
							up by AspectJ and weaved properly (e.g. @Transactional, ...). -->
						<aspectLibrary>
							<groupId>org.springframework</groupId>
							<artifactId>spring-aspects</artifactId>
						</aspectLibrary>
					</aspectLibraries>
					<!-- This will get rid of "can't find superclass" errors when checking 
						pointcut candidates for missing superclasses/interfaces in weaveDependencies 
						(see above). -->
					<Xlint>ignore</Xlint>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
				</dependencies>
			</plugin>
		</plugins>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

	</build>

</project>
